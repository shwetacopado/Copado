#package.xml file is recreated on the fly by Copado, no need to track unnecessary changes of this file
package.xml

#Managed packages can trigger the installation or uninstallation of applications, it is  
#recommended to manage this outside git

installedPackages/*
certs/*
connectedApps/*
samlssoconfigs/*
namedCredentials/*

#Documents are mostly created in Production and are not deployed between Sandboxes. You can safely ignore them in Git.
documents/*
contentassets/*

#Typical Editor Files
#IntelliJ
.idea/*
IlluminatedClout/*

#VSCode
.vscode/*

#VSCode ForceCode
force.json

#VSCode SFDX
.sfdx/*
config/*


#if you are not customizing a managed package, you can keep your repository clean by ignoring 
#all files for that package. For example, to ignore all files of the "Copado" managed package
#just add to your gitignore file the following text: *copado__*
#if you will be customizing managed packages, make sure that the same version of the package 
#is installed on all your environments so that deployments will only update existing 
#managed components. Creation of managed components is not permitted by the API.
#It is recommended that you ignore managed components that cannot be modified 
#since there is no need to track them in Git, like for example:

classes/copado__*
triggers/copado__*
pages/copado__*
lwc/copado__*
aura/copado__*
staticresources/copado__*

classes/trailheadapp__*
triggers/trailheadapp__*
pages/trailheadapp__*
lwc/trailheadapp__*
aura/trailheadapp__*
staticresources/trailheadapp__*

classes/sf_chttr_apps__*
triggers/sf_chttr_apps__*
pages/sf_chttr_apps__*
lwc/sf_chttr_apps__*
aura/sf_chttr_apps__*
staticresources/sf_chttr_apps__*

classes/sf_com_apps__*
triggers/sf_com_apps__*
pages/sf_com_apps__*
lwc/sf_com_apps__*
aura/sf_com_apps__*
staticresources/sf_com_apps__*

classes/relateiq__*
triggers/relateiq__*
pages/relateiq__*
lwc/relateiq__*
aura/relateiq__*
staticresources/relateiq__*

classes/leadcap__*
triggers/leadcap__*
pages/leadcap__*
lwc/leadcap__*
aura/leadcap__*
staticresources/leadcap__*

classes/fpro__*
triggers/fpro__*
pages/fpro__*
lwc/fpro__*
aura/fpro__*
staticresources/fpro__*

classes/SFGA__*
triggers/SFGA__*
pages/SFGA__*
lwc/SFGA__*
aura/SFGA__*
staticresources/SFGA__*

classes/sfadminapps__*
triggers/sfadminapps__*
pages/sfadminapps__*
lwc/sfadminapps__*
aura/sfadminapps__*
staticresources/sfadminapps__*

classes/echosign_dev1__*
triggers/echosign_dev1__*
pages/echosign_dev1__*
lwc/echosign_dev1__*
aura/echosign_dev1__*
staticresources/echosign_dev1__*

classes/SBQQ__*
triggers/SBQQ__*
pages/SBQQ__*
lwc/SBQQ__*
aura/SBQQ__*
staticresources/SBQQ__*

classes/ASSFCPQ__*
triggers/ASSFCPQ__*
pages/ASSFCPQ__*
lwc/ASSFCPQ__*
aura/ASSFCPQ__*
staticresources/ASSFCPQ__*

classes/purecloud__*
triggers/purecloud__*
pages/purecloud__*
lwc/purecloud__*
aura/purecloud__*
staticresources/purecloud__*

#Translations are complex since get updated indirectly across multiple files, they can make a deployment fail
#if a field is translated in source and it doesn't exist on destination. 
#If you are committing incrementally new fields and new Translations you can track them in Git, just be careful. 
#If you choose  to ignore them in Git, you can always create a deployment with the Copado Deployer "Translation" Step. 

# translations/*
# objectTranslations/*

#Sites which has Domain mapping has environment specific information. 
#Make sure you setup Copado Environment Variables to make sites config files environment agnostic.
#Until the above is achieved, you can ignore them as follows

# sites/*
# siteDotComSites/*
